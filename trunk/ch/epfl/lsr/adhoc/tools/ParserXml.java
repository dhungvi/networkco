
package ch.epfl.lsr.adhoc.tools;

//for creating a Dom
import org.w3c.dom.Document;	
import javax.xml.parsers.DocumentBuilder; 	
import javax.xml.parsers.DocumentBuilderFactory; 	
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;	
import java.io.IOException;

//for the parsing  errors we use the same than for a SAX parser
import org.xml.sax.SAXException;	
import org.xml.sax.SAXParseException;
import org.xml.sax.ErrorHandler;

/** this class read the configuration file, parse it and return a Document.
 * Exception are handle when:
 *  - the configuration file is not conform to XML restrictions
 *  - the configuration file is not conform to the Document Type Definition (franc.dtd)
 *@author Mikhaïl Perret
 */


public class ParserXml{

	/** <code>Dispatcher</code> tag name */
	public static String DISPATCHER="Dispatcher";
	/** <code>param</code> tag name */	
 	public static String PARAM="param";
	/** <code>layers</code> tag name */	
 	public static String LAYERS="layers";
	/** <code>layer</code> tag name */	
 	public static String LAYER="layer";
	/** <code>name</code> attibute and tag name */	
 	public static String NAME="name";	
	/** <code>class</code> tag name */	
 	public static String CLASS="class";			
	/** <code>service</code> tag name */	
 	public static String SERVICE="service";				
	/** <code>message</code> tag name */	
 	public static String MESSAGE="message";
	/** <code>type</code> tag name */							
 	public static String TYPE="type";						
	/** <code>messageFactory</code> tag name */		
 	public static String MESSAGE_FACTORY="messageFactory";
	/** <code>msgType</code> attribute name */		
 	public static String MSG_TYPE="msgType";
	/**<code>DataLinkLayer</code> tag name*/
	public static String DATA_LINK_LAYER="DataLinkLayer";
	/**<code>DataLinkLayer</code> tag name*/
	public static String VIRTUAL_NETWORKS="VirtualNetworks";
	/**<code>ipgateway</code> tag name*/
	public static String IPGATEWAY="ipgateway";
	/**<code>routing</code> tag name*/
	public static String ROUTING="routing";
   
    private Document fileParser;

    public ParserXml(){}

    
    public Document parse(File file){

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(true); 
        factory.setNamespaceAware(true);
		factory.setIgnoringElementContentWhitespace(true); 
        try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			builder.setErrorHandler( new ErrorHandler() {
		   
					public void fatalError(SAXParseException exception)	throws SAXException {
						throw exception;
					}	
					public void error(SAXParseException e) throws SAXParseException  {	
						throw e;	
					}	
		    
					public void warning(SAXParseException err) throws SAXParseException	 {	
						System.out.println("** Warning"	+ ", line " + err.getLineNumber() + ", uri " + err.getSystemId());	
						System.out.println("   " + err.getMessage());	
					}	
				}
									 ); 

			fileParser =  builder.parse(file);
	    
	    
        }
		catch (SAXParseException spe) {
			// Error generated by the parser
			System.out.println("\n** Parsing error" + ", line " + spe.getLineNumber() + ", uri " + spe.getSystemId());
			System.out.println("   " + spe.getMessage() );
			System.exit(-1);
        }
		catch (SAXException sxe) {
			// Error generated during parsing)
			Exception  x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();
			System.exit(-1);
        }
		catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
			System.exit(-1);
        }
		catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
			System.exit(-1);
        }
		return fileParser;
    } 
}
